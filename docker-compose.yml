# docker-compose.yml - Complete Production Deployment
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14
    container_name: plant_disease_db
    environment:
      POSTGRES_DB: plant_disease_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: plant_disease_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TensorFlow Serving
  tf-serving:
    image: tensorflow/serving:latest
    container_name: tf_serving
    ports:
      - "8501:8501"  # REST API
      - "8500:8500"  # gRPC
    volumes:
      - ./models:/models
    environment:
      - MODEL_NAME=plant_disease_model
      - MODEL_BASE_PATH=/models/plant_disease
    command:
      - "--model_config_file=/models/plant_disease/models.config"
      - "--model_config_file_poll_wait_seconds=60"
      - "--enable_batching=true"
      - "--batching_parameters_file=/models/batching_config.txt"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/v1/models/plant_disease_model"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: plant_disease_api
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://admin:${DB_PASSWORD}@postgres:5432/plant_disease_db
      - REDIS_URL=redis://redis:6379
      - TF_SERVING_URL=http://tf-serving:8501
      - JWT_SECRET=${JWT_SECRET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      tf-serving:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Worker
  monitoring:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    container_name: monitoring_worker
    environment:
      - DATABASE_URL=postgresql://admin:${DB_PASSWORD}@postgres:5432/plant_disease_db
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./logs:/app/logs
      - ./reports:/app/reports
    depends_on:
      - postgres
      - redis

  # Celery Worker for Background Tasks
  celery:
    build:
      context: .
      dockerfile: Dockerfile.celery
    container_name: celery_worker
    environment:
      - DATABASE_URL=postgresql://admin:${DB_PASSWORD}@postgres:5432/plant_disease_db
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./storage:/app/storage
      - ./models:/app/models
    depends_on:
      - redis
      - postgres

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
      - ./web-app/build:/usr/share/nginx/html
    depends_on:
      - api

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: plant_disease_network